{"ast":null,"code":"/*!\n * cookie-session\n * Copyright(c) 2013 Jonathan Ong\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar debug = require('debug')('cookie-session');\n\nvar Cookies = require('cookies');\n\nvar onHeaders = require('on-headers');\n/**\n * Module exports.\n * @public\n */\n\n\nmodule.exports = cookieSession;\n/**\n * Create a new cookie session middleware.\n *\n * @param {object} [options]\n * @param {boolean} [options.httpOnly=true]\n * @param {array} [options.keys]\n * @param {string} [options.name=express:sess] Name of the cookie to use\n * @param {boolean} [options.overwrite=true]\n * @param {string} [options.secret]\n * @param {boolean} [options.signed=true]\n * @return {function} middleware\n * @public\n */\n\nfunction cookieSession(options) {\n  var opts = options || {}; // name - previously \"opts.key\"\n\n  var name = opts.name || opts.key || 'express:sess'; // secrets\n\n  var keys = opts.keys;\n  if (!keys && opts.secret) keys = [opts.secret]; // defaults\n\n  if (null == opts.overwrite) opts.overwrite = true;\n  if (null == opts.httpOnly) opts.httpOnly = true;\n  if (null == opts.signed) opts.signed = true;\n  if (!keys && opts.signed) throw new Error('.keys required.');\n  debug('session options %j', opts);\n  return function _cookieSession(req, res, next) {\n    var cookies = req.sessionCookies = new Cookies(req, res, {\n      keys: keys\n    });\n    var sess, json; // to pass to Session()\n\n    req.sessionOptions = Object.create(opts);\n    req.sessionKey = name;\n\n    req.__defineGetter__('session', function () {\n      // already retrieved\n      if (sess) return sess; // unset\n\n      if (false === sess) return null;\n      json = cookies.get(name, req.sessionOptions);\n\n      if (json) {\n        debug('parse %s', json);\n\n        try {\n          sess = new Session(req, decode(json));\n        } catch (err) {\n          // backwards compatibility:\n          // create a new session if parsing fails.\n          // new Buffer(string, 'base64') does not seem to crash\n          // when `string` is not base64-encoded.\n          // but `JSON.parse(string)` will crash.\n          if (!(err instanceof SyntaxError)) throw err;\n          sess = new Session(req);\n        }\n      } else {\n        debug('new session');\n        sess = new Session(req);\n      }\n\n      return sess;\n    });\n\n    req.__defineSetter__('session', function (val) {\n      if (null == val) return sess = false;\n      if ('object' == typeof val) return sess = new Session(req, val);\n      throw new Error('req.session can only be set as null or an object.');\n    });\n\n    onHeaders(res, function setHeaders() {\n      if (sess === undefined) {\n        // not accessed\n        return;\n      }\n\n      try {\n        if (sess === false) {\n          // remove\n          cookies.set(name, '', req.sessionOptions);\n        } else if (!json && !sess.length) {// do nothing if new and not populated\n        } else if (sess.changed(json)) {\n          // save\n          sess.save();\n        }\n      } catch (e) {\n        debug('error saving session %s', e.message);\n      }\n    });\n    next();\n  };\n}\n\n;\n/**\n * Session model.\n *\n * @param {Context} ctx\n * @param {Object} obj\n * @private\n */\n\nfunction Session(ctx, obj) {\n  this._ctx = ctx;\n  Object.defineProperty(this, 'isNew', {\n    value: !obj\n  });\n\n  if (obj) {\n    for (var key in obj) {\n      this[key] = obj[key];\n    }\n  }\n}\n/**\n * JSON representation of the session.\n *\n * @return {Object}\n * @public\n */\n\n\nSession.prototype.inspect = Session.prototype.toJSON = function toJSON() {\n  var keys = Object.keys(this);\n  var obj = {};\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n\n    if (key[0] !== '_') {\n      obj[key] = this[key];\n    }\n  }\n\n  return obj;\n};\n/**\n * Check if the session has changed relative to the `prev`\n * JSON value from the request.\n *\n * @param {String} [prev]\n * @return {Boolean}\n * @private\n */\n\n\nSession.prototype.changed = function (prev) {\n  if (!prev) return true;\n  this._json = encode(this);\n  return this._json != prev;\n};\n/**\n * Return how many values there are in the session object.\n * Used to see if it's \"populated\".\n *\n * @return {Number}\n * @public\n */\n\n\nSession.prototype.__defineGetter__('length', function () {\n  return Object.keys(this.toJSON()).length;\n});\n/**\n * populated flag, which is just a boolean alias of .length.\n *\n * @return {Boolean}\n * @public\n */\n\n\nSession.prototype.__defineGetter__('populated', function () {\n  return !!this.length;\n});\n/**\n * Save session changes by performing a Set-Cookie.\n *\n * @private\n */\n\n\nSession.prototype.save = function () {\n  var ctx = this._ctx;\n  var json = this._json || encode(this);\n  var opts = ctx.sessionOptions;\n  var name = ctx.sessionKey;\n  debug('save %s', json);\n  ctx.sessionCookies.set(name, json, opts);\n};\n/**\n * Decode the base64 cookie value to an object.\n *\n * @param {String} string\n * @return {Object}\n * @private\n */\n\n\nfunction decode(string) {\n  var body = new Buffer(string, 'base64').toString('utf8');\n  return JSON.parse(body);\n}\n/**\n * Encode an object into a base64-encoded JSON string.\n *\n * @param {Object} body\n * @return {String}\n * @private\n */\n\n\nfunction encode(body) {\n  var str = JSON.stringify(body);\n  return new Buffer(str).toString('base64');\n}","map":{"version":3,"sources":["/home/astitva/Desktop/basic-react/node_modules/cookie-session/index.js"],"names":["debug","require","Cookies","onHeaders","module","exports","cookieSession","options","opts","name","key","keys","secret","overwrite","httpOnly","signed","Error","_cookieSession","req","res","next","cookies","sessionCookies","sess","json","sessionOptions","Object","create","sessionKey","__defineGetter__","get","Session","decode","err","SyntaxError","__defineSetter__","val","setHeaders","undefined","set","length","changed","save","e","message","ctx","obj","_ctx","defineProperty","value","prototype","inspect","toJSON","i","prev","_json","encode","string","body","Buffer","toString","JSON","parse","str","stringify"],"mappings":"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","sourcesContent":["/*!\n * cookie-session\n * Copyright(c) 2013 Jonathan Ong\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar debug = require('debug')('cookie-session');\nvar Cookies = require('cookies');\nvar onHeaders = require('on-headers');\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = cookieSession\n\n/**\n * Create a new cookie session middleware.\n *\n * @param {object} [options]\n * @param {boolean} [options.httpOnly=true]\n * @param {array} [options.keys]\n * @param {string} [options.name=express:sess] Name of the cookie to use\n * @param {boolean} [options.overwrite=true]\n * @param {string} [options.secret]\n * @param {boolean} [options.signed=true]\n * @return {function} middleware\n * @public\n */\n\nfunction cookieSession(options) {\n  var opts = options || {}\n\n  // name - previously \"opts.key\"\n  var name = opts.name || opts.key || 'express:sess';\n\n  // secrets\n  var keys = opts.keys;\n  if (!keys && opts.secret) keys = [opts.secret];\n\n  // defaults\n  if (null == opts.overwrite) opts.overwrite = true;\n  if (null == opts.httpOnly) opts.httpOnly = true;\n  if (null == opts.signed) opts.signed = true;\n\n  if (!keys && opts.signed) throw new Error('.keys required.');\n\n  debug('session options %j', opts);\n\n  return function _cookieSession(req, res, next) {\n    var cookies = req.sessionCookies = new Cookies(req, res, {\n      keys: keys\n    });\n    var sess, json;\n\n    // to pass to Session()\n    req.sessionOptions = Object.create(opts)\n    req.sessionKey = name\n\n    req.__defineGetter__('session', function(){\n      // already retrieved\n      if (sess) return sess;\n\n      // unset\n      if (false === sess) return null;\n\n      json = cookies.get(name, req.sessionOptions)\n\n      if (json) {\n        debug('parse %s', json);\n        try {\n          sess = new Session(req, decode(json));\n        } catch (err) {\n          // backwards compatibility:\n          // create a new session if parsing fails.\n          // new Buffer(string, 'base64') does not seem to crash\n          // when `string` is not base64-encoded.\n          // but `JSON.parse(string)` will crash.\n          if (!(err instanceof SyntaxError)) throw err;\n          sess = new Session(req);\n        }\n      } else {\n        debug('new session');\n        sess = new Session(req);\n      }\n\n      return sess;\n    });\n\n    req.__defineSetter__('session', function(val){\n      if (null == val) return sess = false;\n      if ('object' == typeof val) return sess = new Session(req, val);\n      throw new Error('req.session can only be set as null or an object.');\n    });\n\n    onHeaders(res, function setHeaders() {\n      if (sess === undefined) {\n        // not accessed\n        return;\n      }\n\n      try {\n        if (sess === false) {\n          // remove\n          cookies.set(name, '', req.sessionOptions)\n        } else if (!json && !sess.length) {\n          // do nothing if new and not populated\n        } else if (sess.changed(json)) {\n          // save\n          sess.save();\n        }\n      } catch (e) {\n        debug('error saving session %s', e.message);\n      }\n    });\n\n    next();\n  }\n};\n\n/**\n * Session model.\n *\n * @param {Context} ctx\n * @param {Object} obj\n * @private\n */\n\nfunction Session(ctx, obj) {\n  this._ctx = ctx\n\n  Object.defineProperty(this, 'isNew', {\n    value: !obj\n  })\n\n  if (obj) {\n    for (var key in obj) {\n      this[key] = obj[key]\n    }\n  }\n}\n\n/**\n * JSON representation of the session.\n *\n * @return {Object}\n * @public\n */\n\nSession.prototype.inspect =\nSession.prototype.toJSON = function toJSON() {\n  var keys = Object.keys(this)\n  var obj = {}\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i]\n\n    if (key[0] !== '_') {\n      obj[key] = this[key]\n    }\n  }\n\n  return obj\n}\n\n/**\n * Check if the session has changed relative to the `prev`\n * JSON value from the request.\n *\n * @param {String} [prev]\n * @return {Boolean}\n * @private\n */\n\nSession.prototype.changed = function(prev){\n  if (!prev) return true;\n  this._json = encode(this);\n  return this._json != prev;\n};\n\n/**\n * Return how many values there are in the session object.\n * Used to see if it's \"populated\".\n *\n * @return {Number}\n * @public\n */\n\nSession.prototype.__defineGetter__('length', function(){\n  return Object.keys(this.toJSON()).length;\n});\n\n/**\n * populated flag, which is just a boolean alias of .length.\n *\n * @return {Boolean}\n * @public\n */\n\nSession.prototype.__defineGetter__('populated', function(){\n  return !!this.length;\n});\n\n/**\n * Save session changes by performing a Set-Cookie.\n *\n * @private\n */\n\nSession.prototype.save = function(){\n  var ctx = this._ctx;\n  var json = this._json || encode(this);\n  var opts = ctx.sessionOptions;\n  var name = ctx.sessionKey;\n\n  debug('save %s', json);\n  ctx.sessionCookies.set(name, json, opts);\n};\n\n/**\n * Decode the base64 cookie value to an object.\n *\n * @param {String} string\n * @return {Object}\n * @private\n */\n\nfunction decode(string) {\n  var body = new Buffer(string, 'base64').toString('utf8');\n  return JSON.parse(body);\n}\n\n/**\n * Encode an object into a base64-encoded JSON string.\n *\n * @param {Object} body\n * @return {String}\n * @private\n */\n\nfunction encode(body) {\n  var str = JSON.stringify(body)\n  return new Buffer(str).toString('base64')\n}\n"]},"metadata":{},"sourceType":"script"}