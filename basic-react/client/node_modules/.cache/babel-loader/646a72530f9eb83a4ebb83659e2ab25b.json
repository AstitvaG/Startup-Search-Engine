{"ast":null,"code":"var uid = require('uid2');\n/**\n * Creates an instance of `SessionStore`.\n *\n * This is the state store implementation for the OAuth2Strategy used when\n * the `state` option is enabled.  It generates a random state and stores it in\n * `req.session` and verifies it when the service provider redirects the user\n * back to the application.\n *\n * This state store requires session support.  If no session exists, an error\n * will be thrown.\n *\n * Options:\n *\n *   - `key`  The key in the session under which to store the state\n *\n * @constructor\n * @param {Object} options\n * @api public\n */\n\n\nfunction PKCESessionStore(options) {\n  if (!options.key) {\n    throw new TypeError('Session-based state store requires a session key');\n  }\n\n  this._key = options.key;\n}\n/**\n * Store request state.\n *\n * This implementation simply generates a random string and stores the value in\n * the session, where it will be used for verification when the user is\n * redirected back to the application.\n *\n * @param {Object} req\n * @param {Function} callback\n * @api protected\n */\n\n\nPKCESessionStore.prototype.store = function (req, verifier, state, meta, callback) {\n  if (!req.session) {\n    return callback(new Error('OAuth 2.0 authentication requires session support when using state. Did you forget to use express-session middleware?'));\n  }\n\n  var key = this._key;\n  var state = {\n    handle: uid(24),\n    code_verifier: verifier\n  };\n\n  if (!req.session[key]) {\n    req.session[key] = {};\n  }\n\n  req.session[key].state = state;\n  callback(null, state.handle);\n};\n/**\n * Verify request state.\n *\n * This implementation simply compares the state parameter in the request to the\n * value generated earlier and stored in the session.\n *\n * @param {Object} req\n * @param {String} providedState\n * @param {Function} callback\n * @api protected\n */\n\n\nPKCESessionStore.prototype.verify = function (req, providedState, callback) {\n  if (!req.session) {\n    return callback(new Error('OAuth 2.0 authentication requires session support when using state. Did you forget to use express-session middleware?'));\n  }\n\n  var key = this._key;\n\n  if (!req.session[key]) {\n    return callback(null, false, {\n      message: 'Unable to verify authorization request state.'\n    });\n  }\n\n  var state = req.session[key].state;\n\n  if (!state) {\n    return callback(null, false, {\n      message: 'Unable to verify authorization request state.'\n    });\n  }\n\n  delete req.session[key].state;\n\n  if (Object.keys(req.session[key]).length === 0) {\n    delete req.session[key];\n  }\n\n  if (state.handle !== providedState) {\n    return callback(null, false, {\n      message: 'Invalid authorization request state.'\n    });\n  }\n\n  return callback(null, state.code_verifier);\n}; // Expose constructor.\n\n\nmodule.exports = PKCESessionStore;","map":{"version":3,"sources":["/home/astitva/Desktop/basic-react/node_modules/passport-oauth2/lib/state/pkcesession.js"],"names":["uid","require","PKCESessionStore","options","key","TypeError","_key","prototype","store","req","verifier","state","meta","callback","session","Error","handle","code_verifier","verify","providedState","message","Object","keys","length","module","exports"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;AAmBA,SAASC,gBAAT,CAA0BC,OAA1B,EAAmC;AACjC,MAAI,CAACA,OAAO,CAACC,GAAb,EAAkB;AAAE,UAAM,IAAIC,SAAJ,CAAc,kDAAd,CAAN;AAA0E;;AAC9F,OAAKC,IAAL,GAAYH,OAAO,CAACC,GAApB;AACD;AAED;;;;;;;;;;;;;AAWAF,gBAAgB,CAACK,SAAjB,CAA2BC,KAA3B,GAAmC,UAASC,GAAT,EAAcC,QAAd,EAAwBC,KAAxB,EAA+BC,IAA/B,EAAqCC,QAArC,EAA+C;AAChF,MAAI,CAACJ,GAAG,CAACK,OAAT,EAAkB;AAAE,WAAOD,QAAQ,CAAC,IAAIE,KAAJ,CAAU,uHAAV,CAAD,CAAf;AAAsJ;;AAE1K,MAAIX,GAAG,GAAG,KAAKE,IAAf;AACA,MAAIK,KAAK,GAAG;AACVK,IAAAA,MAAM,EAAEhB,GAAG,CAAC,EAAD,CADD;AAEViB,IAAAA,aAAa,EAAEP;AAFL,GAAZ;;AAIA,MAAI,CAACD,GAAG,CAACK,OAAJ,CAAYV,GAAZ,CAAL,EAAuB;AAAEK,IAAAA,GAAG,CAACK,OAAJ,CAAYV,GAAZ,IAAmB,EAAnB;AAAwB;;AACjDK,EAAAA,GAAG,CAACK,OAAJ,CAAYV,GAAZ,EAAiBO,KAAjB,GAAyBA,KAAzB;AACAE,EAAAA,QAAQ,CAAC,IAAD,EAAOF,KAAK,CAACK,MAAb,CAAR;AACD,CAXD;AAaA;;;;;;;;;;;;;AAWAd,gBAAgB,CAACK,SAAjB,CAA2BW,MAA3B,GAAoC,UAAST,GAAT,EAAcU,aAAd,EAA6BN,QAA7B,EAAuC;AACzE,MAAI,CAACJ,GAAG,CAACK,OAAT,EAAkB;AAAE,WAAOD,QAAQ,CAAC,IAAIE,KAAJ,CAAU,uHAAV,CAAD,CAAf;AAAsJ;;AAE1K,MAAIX,GAAG,GAAG,KAAKE,IAAf;;AACA,MAAI,CAACG,GAAG,CAACK,OAAJ,CAAYV,GAAZ,CAAL,EAAuB;AACrB,WAAOS,QAAQ,CAAC,IAAD,EAAO,KAAP,EAAc;AAAEO,MAAAA,OAAO,EAAE;AAAX,KAAd,CAAf;AACD;;AAED,MAAIT,KAAK,GAAGF,GAAG,CAACK,OAAJ,CAAYV,GAAZ,EAAiBO,KAA7B;;AACA,MAAI,CAACA,KAAL,EAAY;AACV,WAAOE,QAAQ,CAAC,IAAD,EAAO,KAAP,EAAc;AAAEO,MAAAA,OAAO,EAAE;AAAX,KAAd,CAAf;AACD;;AAED,SAAOX,GAAG,CAACK,OAAJ,CAAYV,GAAZ,EAAiBO,KAAxB;;AACA,MAAIU,MAAM,CAACC,IAAP,CAAYb,GAAG,CAACK,OAAJ,CAAYV,GAAZ,CAAZ,EAA8BmB,MAA9B,KAAyC,CAA7C,EAAgD;AAC9C,WAAOd,GAAG,CAACK,OAAJ,CAAYV,GAAZ,CAAP;AACD;;AAED,MAAIO,KAAK,CAACK,MAAN,KAAiBG,aAArB,EAAoC;AAClC,WAAON,QAAQ,CAAC,IAAD,EAAO,KAAP,EAAc;AAAEO,MAAAA,OAAO,EAAE;AAAX,KAAd,CAAf;AACD;;AAED,SAAOP,QAAQ,CAAC,IAAD,EAAOF,KAAK,CAACM,aAAb,CAAf;AACD,CAvBD,C,CAyBA;;;AACAO,MAAM,CAACC,OAAP,GAAiBvB,gBAAjB","sourcesContent":["var uid = require('uid2');\n\n/**\n * Creates an instance of `SessionStore`.\n *\n * This is the state store implementation for the OAuth2Strategy used when\n * the `state` option is enabled.  It generates a random state and stores it in\n * `req.session` and verifies it when the service provider redirects the user\n * back to the application.\n *\n * This state store requires session support.  If no session exists, an error\n * will be thrown.\n *\n * Options:\n *\n *   - `key`  The key in the session under which to store the state\n *\n * @constructor\n * @param {Object} options\n * @api public\n */\nfunction PKCESessionStore(options) {\n  if (!options.key) { throw new TypeError('Session-based state store requires a session key'); }\n  this._key = options.key;\n}\n\n/**\n * Store request state.\n *\n * This implementation simply generates a random string and stores the value in\n * the session, where it will be used for verification when the user is\n * redirected back to the application.\n *\n * @param {Object} req\n * @param {Function} callback\n * @api protected\n */\nPKCESessionStore.prototype.store = function(req, verifier, state, meta, callback) {\n  if (!req.session) { return callback(new Error('OAuth 2.0 authentication requires session support when using state. Did you forget to use express-session middleware?')); }\n\n  var key = this._key;\n  var state = {\n    handle: uid(24),\n    code_verifier: verifier\n  };\n  if (!req.session[key]) { req.session[key] = {}; }\n  req.session[key].state = state;\n  callback(null, state.handle);\n};\n\n/**\n * Verify request state.\n *\n * This implementation simply compares the state parameter in the request to the\n * value generated earlier and stored in the session.\n *\n * @param {Object} req\n * @param {String} providedState\n * @param {Function} callback\n * @api protected\n */\nPKCESessionStore.prototype.verify = function(req, providedState, callback) {\n  if (!req.session) { return callback(new Error('OAuth 2.0 authentication requires session support when using state. Did you forget to use express-session middleware?')); }\n\n  var key = this._key;\n  if (!req.session[key]) {\n    return callback(null, false, { message: 'Unable to verify authorization request state.' });\n  }\n\n  var state = req.session[key].state;\n  if (!state) {\n    return callback(null, false, { message: 'Unable to verify authorization request state.' });\n  }\n\n  delete req.session[key].state;\n  if (Object.keys(req.session[key]).length === 0) {\n    delete req.session[key];\n  }\n\n  if (state.handle !== providedState) {\n    return callback(null, false, { message: 'Invalid authorization request state.' });\n  }\n\n  return callback(null, state.code_verifier);\n};\n\n// Expose constructor.\nmodule.exports = PKCESessionStore;\n"]},"metadata":{},"sourceType":"script"}