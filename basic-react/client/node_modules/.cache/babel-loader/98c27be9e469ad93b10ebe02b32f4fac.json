{"ast":null,"code":"// Load modules.\nvar OAuth2Strategy = require('passport-oauth2'),\n    util = require('util'),\n    uri = require('url'),\n    GooglePlusProfile = require('./profile/googleplus'),\n    OpenIDProfile = require('./profile/openid'),\n    InternalOAuthError = require('passport-oauth2').InternalOAuthError,\n    GooglePlusAPIError = require('./errors/googleplusapierror'),\n    UserInfoError = require('./errors/userinfoerror');\n/**\n * `Strategy` constructor.\n *\n * The Google authentication strategy authenticates requests by delegating to\n * Google using the OAuth 2.0 protocol.\n *\n * Applications must supply a `verify` callback which accepts an `accessToken`,\n * `refreshToken` and service-specific `profile`, and then calls the `cb`\n * callback supplying a `user`, which should be set to `false` if the\n * credentials are not valid.  If an exception occured, `err` should be set.\n *\n * Options:\n *   - `clientID`      your Google application's client id\n *   - `clientSecret`  your Google application's client secret\n *   - `callbackURL`   URL to which Google will redirect the user after granting authorization\n *\n * Examples:\n *\n *     passport.use(new GoogleStrategy({\n *         clientID: '123-456-789',\n *         clientSecret: 'shhh-its-a-secret'\n *         callbackURL: 'https://www.example.net/auth/google/callback'\n *       },\n *       function(accessToken, refreshToken, profile, cb) {\n *         User.findOrCreate(..., function (err, user) {\n *           cb(err, user);\n *         });\n *       }\n *     ));\n *\n * @constructor\n * @param {object} options\n * @param {function} verify\n * @access public\n */\n\n\nfunction Strategy(options, verify) {\n  options = options || {};\n  options.authorizationURL = options.authorizationURL || 'https://accounts.google.com/o/oauth2/v2/auth';\n  options.tokenURL = options.tokenURL || 'https://www.googleapis.com/oauth2/v4/token';\n  OAuth2Strategy.call(this, options, verify);\n  this.name = 'google';\n  this._userProfileURL = options.userProfileURL || 'https://www.googleapis.com/oauth2/v3/userinfo';\n  var url = uri.parse(this._userProfileURL);\n\n  if (url.pathname.indexOf('/userinfo') == url.pathname.length - '/userinfo'.length) {\n    this._userProfileFormat = 'openid';\n  } else {\n    this._userProfileFormat = 'google+'; // Google Sign-In\n  }\n} // Inherit from `OAuth2Strategy`.\n\n\nutil.inherits(Strategy, OAuth2Strategy);\n/**\n * Retrieve user profile from Google.\n *\n * This function constructs a normalized profile, with the following properties:\n *\n *   - `provider`         always set to `google`\n *   - `id`\n *   - `username`\n *   - `displayName`\n *\n * @param {string} accessToken\n * @param {function} done\n * @access protected\n */\n\nStrategy.prototype.userProfile = function (accessToken, done) {\n  var self = this;\n\n  this._oauth2.get(this._userProfileURL, accessToken, function (err, body, res) {\n    var json;\n\n    if (err) {\n      if (err.data) {\n        try {\n          json = JSON.parse(err.data);\n        } catch (_) {}\n      }\n\n      if (json && json.error && json.error.message) {\n        return done(new GooglePlusAPIError(json.error.message, json.error.code));\n      } else if (json && json.error && json.error_description) {\n        return done(new UserInfoError(json.error_description, json.error));\n      }\n\n      return done(new InternalOAuthError('Failed to fetch user profile', err));\n    }\n\n    try {\n      json = JSON.parse(body);\n    } catch (ex) {\n      return done(new Error('Failed to parse user profile'));\n    }\n\n    var profile;\n\n    switch (self._userProfileFormat) {\n      case 'openid':\n        profile = OpenIDProfile.parse(json);\n        break;\n\n      default:\n        // Google Sign-In\n        profile = GooglePlusProfile.parse(json);\n        break;\n    }\n\n    profile.provider = 'google';\n    profile._raw = body;\n    profile._json = json;\n    done(null, profile);\n  });\n};\n/**\n * Return extra Google-specific parameters to be included in the authorization\n * request.\n *\n * @param {object} options\n * @return {object}\n * @access protected\n */\n\n\nStrategy.prototype.authorizationParams = function (options) {\n  var params = {}; // https://developers.google.com/identity/protocols/OAuth2WebServer\n\n  if (options.accessType) {\n    params['access_type'] = options.accessType;\n  }\n\n  if (options.prompt) {\n    params['prompt'] = options.prompt;\n  }\n\n  if (options.loginHint) {\n    params['login_hint'] = options.loginHint;\n  }\n\n  if (options.includeGrantedScopes) {\n    params['include_granted_scopes'] = true;\n  } // https://developers.google.com/identity/protocols/OpenIDConnect\n\n\n  if (options.display) {\n    // Specify what kind of display consent screen to display to users.\n    //   https://developers.google.com/accounts/docs/OpenIDConnect#authenticationuriparameters\n    params['display'] = options.display;\n  } // Google Apps for Work\n\n\n  if (options.hostedDomain || options.hd) {\n    // This parameter is derived from Google's OAuth 1.0 endpoint, and (although\n    // undocumented) is supported by Google's OAuth 2.0 endpoint was well.\n    //   https://developers.google.com/accounts/docs/OAuth_ref\n    params['hd'] = options.hostedDomain || options.hd;\n  } // Google+\n\n\n  if (options.requestVisibleActions) {\n    // Space separated list of allowed app actions\n    // as documented at:\n    //  https://developers.google.com/+/web/app-activities/#writing_an_app_activity_using_the_google_apis_client_libraries\n    //  https://developers.google.com/+/api/moment-types/\n    params['request_visible_actions'] = options.requestVisibleActions;\n  } // OpenID 2.0 migration\n\n\n  if (options.openIDRealm) {\n    // This parameter is needed when migrating users from Google's OpenID 2.0 to OAuth 2.0\n    //   https://developers.google.com/accounts/docs/OpenID?hl=ja#adjust-uri\n    params['openid.realm'] = options.openIDRealm;\n  } // Undocumented\n\n\n  if (options.approvalPrompt) {\n    params['approval_prompt'] = options.approvalPrompt;\n  }\n\n  if (options.userID) {\n    // Undocumented, but supported by Google's OAuth 2.0 endpoint.  Appears to\n    // be equivalent to `login_hint`.\n    params['user_id'] = options.userID;\n  }\n\n  return params;\n};\n/**\n * Expose `Strategy`.\n */\n\n\nmodule.exports = Strategy;","map":{"version":3,"sources":["/home/astitva/Desktop/basic-react/node_modules/passport-google-oauth20/lib/strategy.js"],"names":["OAuth2Strategy","require","util","uri","GooglePlusProfile","OpenIDProfile","InternalOAuthError","GooglePlusAPIError","UserInfoError","Strategy","options","verify","authorizationURL","tokenURL","call","name","_userProfileURL","userProfileURL","url","parse","pathname","indexOf","length","_userProfileFormat","inherits","prototype","userProfile","accessToken","done","self","_oauth2","get","err","body","res","json","data","JSON","_","error","message","code","error_description","ex","Error","profile","provider","_raw","_json","authorizationParams","params","accessType","prompt","loginHint","includeGrantedScopes","display","hostedDomain","hd","requestVisibleActions","openIDRealm","approvalPrompt","userID","module","exports"],"mappings":"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","sourcesContent":["// Load modules.\nvar OAuth2Strategy = require('passport-oauth2')\n  , util = require('util')\n  , uri = require('url')\n  , GooglePlusProfile = require('./profile/googleplus')\n  , OpenIDProfile = require('./profile/openid')\n  , InternalOAuthError = require('passport-oauth2').InternalOAuthError\n  , GooglePlusAPIError = require('./errors/googleplusapierror')\n  , UserInfoError = require('./errors/userinfoerror');\n\n\n/**\n * `Strategy` constructor.\n *\n * The Google authentication strategy authenticates requests by delegating to\n * Google using the OAuth 2.0 protocol.\n *\n * Applications must supply a `verify` callback which accepts an `accessToken`,\n * `refreshToken` and service-specific `profile`, and then calls the `cb`\n * callback supplying a `user`, which should be set to `false` if the\n * credentials are not valid.  If an exception occured, `err` should be set.\n *\n * Options:\n *   - `clientID`      your Google application's client id\n *   - `clientSecret`  your Google application's client secret\n *   - `callbackURL`   URL to which Google will redirect the user after granting authorization\n *\n * Examples:\n *\n *     passport.use(new GoogleStrategy({\n *         clientID: '123-456-789',\n *         clientSecret: 'shhh-its-a-secret'\n *         callbackURL: 'https://www.example.net/auth/google/callback'\n *       },\n *       function(accessToken, refreshToken, profile, cb) {\n *         User.findOrCreate(..., function (err, user) {\n *           cb(err, user);\n *         });\n *       }\n *     ));\n *\n * @constructor\n * @param {object} options\n * @param {function} verify\n * @access public\n */\nfunction Strategy(options, verify) {\n  options = options || {};\n  options.authorizationURL = options.authorizationURL || 'https://accounts.google.com/o/oauth2/v2/auth';\n  options.tokenURL = options.tokenURL || 'https://www.googleapis.com/oauth2/v4/token';\n\n  OAuth2Strategy.call(this, options, verify);\n  this.name = 'google';\n  this._userProfileURL = options.userProfileURL || 'https://www.googleapis.com/oauth2/v3/userinfo';\n  \n  var url = uri.parse(this._userProfileURL);\n  if (url.pathname.indexOf('/userinfo') == (url.pathname.length - '/userinfo'.length)) {\n    this._userProfileFormat = 'openid';\n  } else {\n    this._userProfileFormat = 'google+'; // Google Sign-In\n  }\n}\n\n// Inherit from `OAuth2Strategy`.\nutil.inherits(Strategy, OAuth2Strategy);\n\n\n/**\n * Retrieve user profile from Google.\n *\n * This function constructs a normalized profile, with the following properties:\n *\n *   - `provider`         always set to `google`\n *   - `id`\n *   - `username`\n *   - `displayName`\n *\n * @param {string} accessToken\n * @param {function} done\n * @access protected\n */\nStrategy.prototype.userProfile = function(accessToken, done) {\n  var self = this;\n  this._oauth2.get(this._userProfileURL, accessToken, function (err, body, res) {\n    var json;\n    \n    if (err) {\n      if (err.data) {\n        try {\n          json = JSON.parse(err.data);\n        } catch (_) {}\n      }\n      \n      if (json && json.error && json.error.message) {\n        return done(new GooglePlusAPIError(json.error.message, json.error.code));\n      } else if (json && json.error && json.error_description) {\n        return done(new UserInfoError(json.error_description, json.error));\n      }\n      return done(new InternalOAuthError('Failed to fetch user profile', err));\n    }\n    \n    try {\n      json = JSON.parse(body);\n    } catch (ex) {\n      return done(new Error('Failed to parse user profile'));\n    }\n    \n    var profile;\n    switch (self._userProfileFormat) {\n    case 'openid':\n      profile = OpenIDProfile.parse(json);\n      break;\n    default: // Google Sign-In\n      profile = GooglePlusProfile.parse(json);\n      break;\n    }\n    \n    profile.provider  = 'google';\n    profile._raw = body;\n    profile._json = json;\n    \n    done(null, profile);\n  });\n}\n\n/**\n * Return extra Google-specific parameters to be included in the authorization\n * request.\n *\n * @param {object} options\n * @return {object}\n * @access protected\n */\nStrategy.prototype.authorizationParams = function(options) {\n  var params = {};\n  \n  // https://developers.google.com/identity/protocols/OAuth2WebServer\n  if (options.accessType) {\n    params['access_type'] = options.accessType;\n  }\n  if (options.prompt) {\n    params['prompt'] = options.prompt;\n  }\n  if (options.loginHint) {\n    params['login_hint'] = options.loginHint;\n  }\n  if (options.includeGrantedScopes) {\n    params['include_granted_scopes'] = true;\n  }\n  \n  // https://developers.google.com/identity/protocols/OpenIDConnect\n  if (options.display) {\n    // Specify what kind of display consent screen to display to users.\n    //   https://developers.google.com/accounts/docs/OpenIDConnect#authenticationuriparameters\n    params['display'] = options.display;\n  }\n  \n  // Google Apps for Work\n  if (options.hostedDomain || options.hd) {\n    // This parameter is derived from Google's OAuth 1.0 endpoint, and (although\n    // undocumented) is supported by Google's OAuth 2.0 endpoint was well.\n    //   https://developers.google.com/accounts/docs/OAuth_ref\n    params['hd'] = options.hostedDomain || options.hd;\n  }\n  \n  // Google+\n  if (options.requestVisibleActions) {\n    // Space separated list of allowed app actions\n    // as documented at:\n    //  https://developers.google.com/+/web/app-activities/#writing_an_app_activity_using_the_google_apis_client_libraries\n    //  https://developers.google.com/+/api/moment-types/\n    params['request_visible_actions'] = options.requestVisibleActions;\n  }\n  \n  // OpenID 2.0 migration\n  if (options.openIDRealm) {\n    // This parameter is needed when migrating users from Google's OpenID 2.0 to OAuth 2.0\n    //   https://developers.google.com/accounts/docs/OpenID?hl=ja#adjust-uri\n    params['openid.realm'] = options.openIDRealm;\n  }\n  \n  // Undocumented\n  if (options.approvalPrompt) {\n    params['approval_prompt'] = options.approvalPrompt;\n  }\n  if (options.userID) {\n    // Undocumented, but supported by Google's OAuth 2.0 endpoint.  Appears to\n    // be equivalent to `login_hint`.\n    params['user_id'] = options.userID;\n  }\n  \n  return params;\n}\n\n\n/**\n * Expose `Strategy`.\n */\nmodule.exports = Strategy;\n"]},"metadata":{},"sourceType":"script"}