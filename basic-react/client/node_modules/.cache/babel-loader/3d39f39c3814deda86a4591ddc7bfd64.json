{"ast":null,"code":"exports.merge = require('utils-merge');\n/**\n * Reconstructs the original URL of the request.\n *\n * This function builds a URL that corresponds the original URL requested by the\n * client, including the protocol (http or https) and host.\n *\n * If the request passed through any proxies that terminate SSL, the\n * `X-Forwarded-Proto` header is used to detect if the request was encrypted to\n * the proxy, assuming that the proxy has been flagged as trusted.\n *\n * @param {http.IncomingMessage} req\n * @param {Object} [options]\n * @return {String}\n * @api private\n */\n\nexports.originalURL = function (req, options) {\n  options = options || {};\n  var app = req.app;\n\n  if (app && app.get && app.get('trust proxy')) {\n    options.proxy = true;\n  }\n\n  var trustProxy = options.proxy;\n  var proto = (req.headers['x-forwarded-proto'] || '').toLowerCase(),\n      tls = req.connection.encrypted || trustProxy && 'https' == proto.split(/\\s*,\\s*/)[0],\n      host = trustProxy && req.headers['x-forwarded-host'] || req.headers.host,\n      protocol = tls ? 'https' : 'http',\n      path = req.url || '';\n  return protocol + '://' + host + path;\n};","map":{"version":3,"sources":["/home/astitva/Desktop/basic-react/node_modules/passport-oauth2/lib/utils.js"],"names":["exports","merge","require","originalURL","req","options","app","get","proxy","trustProxy","proto","headers","toLowerCase","tls","connection","encrypted","split","host","protocol","path","url"],"mappings":"AAAAA,OAAO,CAACC,KAAR,GAAgBC,OAAO,CAAC,aAAD,CAAvB;AAEA;;;;;;;;;;;;;;;;AAeAF,OAAO,CAACG,WAAR,GAAsB,UAASC,GAAT,EAAcC,OAAd,EAAuB;AAC3CA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,MAAIC,GAAG,GAAGF,GAAG,CAACE,GAAd;;AACA,MAAIA,GAAG,IAAIA,GAAG,CAACC,GAAX,IAAkBD,GAAG,CAACC,GAAJ,CAAQ,aAAR,CAAtB,EAA8C;AAC5CF,IAAAA,OAAO,CAACG,KAAR,GAAgB,IAAhB;AACD;;AACD,MAAIC,UAAU,GAAGJ,OAAO,CAACG,KAAzB;AAEA,MAAIE,KAAK,GAAG,CAACN,GAAG,CAACO,OAAJ,CAAY,mBAAZ,KAAoC,EAArC,EAAyCC,WAAzC,EAAZ;AAAA,MACIC,GAAG,GAAGT,GAAG,CAACU,UAAJ,CAAeC,SAAf,IAA6BN,UAAU,IAAI,WAAWC,KAAK,CAACM,KAAN,CAAY,SAAZ,EAAuB,CAAvB,CADhE;AAAA,MAEIC,IAAI,GAAIR,UAAU,IAAIL,GAAG,CAACO,OAAJ,CAAY,kBAAZ,CAAf,IAAmDP,GAAG,CAACO,OAAJ,CAAYM,IAF1E;AAAA,MAGIC,QAAQ,GAAGL,GAAG,GAAG,OAAH,GAAa,MAH/B;AAAA,MAIIM,IAAI,GAAGf,GAAG,CAACgB,GAAJ,IAAW,EAJtB;AAKA,SAAOF,QAAQ,GAAG,KAAX,GAAmBD,IAAnB,GAA0BE,IAAjC;AACD,CAdD","sourcesContent":["exports.merge = require('utils-merge');\n\n/**\n * Reconstructs the original URL of the request.\n *\n * This function builds a URL that corresponds the original URL requested by the\n * client, including the protocol (http or https) and host.\n *\n * If the request passed through any proxies that terminate SSL, the\n * `X-Forwarded-Proto` header is used to detect if the request was encrypted to\n * the proxy, assuming that the proxy has been flagged as trusted.\n *\n * @param {http.IncomingMessage} req\n * @param {Object} [options]\n * @return {String}\n * @api private\n */\nexports.originalURL = function(req, options) {\n  options = options || {};\n  var app = req.app;\n  if (app && app.get && app.get('trust proxy')) {\n    options.proxy = true;\n  }\n  var trustProxy = options.proxy;\n  \n  var proto = (req.headers['x-forwarded-proto'] || '').toLowerCase()\n    , tls = req.connection.encrypted || (trustProxy && 'https' == proto.split(/\\s*,\\s*/)[0])\n    , host = (trustProxy && req.headers['x-forwarded-host']) || req.headers.host\n    , protocol = tls ? 'https' : 'http'\n    , path = req.url || '';\n  return protocol + '://' + host + path;\n};\n"]},"metadata":{},"sourceType":"script"}