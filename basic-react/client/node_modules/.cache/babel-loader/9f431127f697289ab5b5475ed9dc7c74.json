{"ast":null,"code":"/**\n * Module dependencies\n */\nvar crypto = require('crypto');\n/**\n * 62 characters in the ascii range that can be used in URLs without special\n * encoding.\n */\n\n\nvar UIDCHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n/**\n * Make a Buffer into a string ready for use in URLs\n *\n * @param {String}\n * @returns {String}\n * @api private\n */\n\nfunction tostr(bytes) {\n  var chars, r, i;\n  r = [];\n\n  for (i = 0; i < bytes.length; i++) {\n    r.push(UIDCHARS[bytes[i] % UIDCHARS.length]);\n  }\n\n  return r.join('');\n}\n/**\n * Generate an Unique Id\n *\n * @param {Number} length  The number of chars of the uid\n * @param {Number} cb (optional)  Callback for async uid generation\n * @api public\n */\n\n\nfunction uid(length, cb) {\n  if (typeof cb === 'undefined') {\n    return tostr(crypto.pseudoRandomBytes(length));\n  } else {\n    crypto.pseudoRandomBytes(length, function (err, bytes) {\n      if (err) return cb(err);\n      cb(null, tostr(bytes));\n    });\n  }\n}\n/**\n * Exports\n */\n\n\nmodule.exports = uid;","map":{"version":3,"sources":["/home/astitva/Desktop/basic-react/node_modules/uid2/index.js"],"names":["crypto","require","UIDCHARS","tostr","bytes","chars","r","i","length","push","join","uid","cb","pseudoRandomBytes","err","module","exports"],"mappings":"AAAA;;;AAIA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;AAEA;;;;;;AAIA,IAAIC,QAAQ,GAAG,gEAAf;AAEA;;;;;;;;AAOA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACpB,MAAIC,KAAJ,EAAWC,CAAX,EAAcC,CAAd;AAEAD,EAAAA,CAAC,GAAG,EAAJ;;AACA,OAAKC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGH,KAAK,CAACI,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AACjCD,IAAAA,CAAC,CAACG,IAAF,CAAOP,QAAQ,CAACE,KAAK,CAACG,CAAD,CAAL,GAAWL,QAAQ,CAACM,MAArB,CAAf;AACD;;AAED,SAAOF,CAAC,CAACI,IAAF,CAAO,EAAP,CAAP;AACD;AAED;;;;;;;;;AAQA,SAASC,GAAT,CAAaH,MAAb,EAAqBI,EAArB,EAAyB;AAEvB,MAAI,OAAOA,EAAP,KAAc,WAAlB,EAA+B;AAC7B,WAAOT,KAAK,CAACH,MAAM,CAACa,iBAAP,CAAyBL,MAAzB,CAAD,CAAZ;AACD,GAFD,MAEO;AACLR,IAAAA,MAAM,CAACa,iBAAP,CAAyBL,MAAzB,EAAiC,UAASM,GAAT,EAAcV,KAAd,EAAqB;AACnD,UAAIU,GAAJ,EAAS,OAAOF,EAAE,CAACE,GAAD,CAAT;AACTF,MAAAA,EAAE,CAAC,IAAD,EAAOT,KAAK,CAACC,KAAD,CAAZ,CAAF;AACF,KAHD;AAID;AACF;AAED;;;;;AAIAW,MAAM,CAACC,OAAP,GAAiBL,GAAjB","sourcesContent":["/**\n * Module dependencies\n */\n\nvar crypto = require('crypto');\n\n/**\n * 62 characters in the ascii range that can be used in URLs without special\n * encoding.\n */\nvar UIDCHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n/**\n * Make a Buffer into a string ready for use in URLs\n *\n * @param {String}\n * @returns {String}\n * @api private\n */\nfunction tostr(bytes) {\n  var chars, r, i;\n\n  r = [];\n  for (i = 0; i < bytes.length; i++) {\n    r.push(UIDCHARS[bytes[i] % UIDCHARS.length]);\n  }\n\n  return r.join('');\n}\n\n/**\n * Generate an Unique Id\n *\n * @param {Number} length  The number of chars of the uid\n * @param {Number} cb (optional)  Callback for async uid generation\n * @api public\n */\n\nfunction uid(length, cb) {\n\n  if (typeof cb === 'undefined') {\n    return tostr(crypto.pseudoRandomBytes(length));\n  } else {\n    crypto.pseudoRandomBytes(length, function(err, bytes) {\n       if (err) return cb(err);\n       cb(null, tostr(bytes));\n    })\n  }\n}\n\n/**\n * Exports\n */\n\nmodule.exports = uid;\n"]},"metadata":{},"sourceType":"script"}