{"ast":null,"code":"/**\n * `InternalOAuthError` error.\n *\n * InternalOAuthError wraps errors generated by node-oauth.  By wrapping these\n * objects, error messages can be formatted in a manner that aids in debugging\n * OAuth issues.\n *\n * @constructor\n * @param {String} [message]\n * @param {Object|Error} [err]\n * @api public\n */\nfunction InternalOAuthError(message, err) {\n  Error.call(this);\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n  this.message = message;\n  this.oauthError = err;\n}\n/**\n * Inherit from `Error`.\n */\n\n\nInternalOAuthError.prototype.__proto__ = Error.prototype;\n/**\n * Returns a string representing the error.\n *\n * @return {String}\n * @api public\n */\n\nInternalOAuthError.prototype.toString = function () {\n  var m = this.name;\n\n  if (this.message) {\n    m += ': ' + this.message;\n  }\n\n  if (this.oauthError) {\n    if (this.oauthError instanceof Error) {\n      m = this.oauthError.toString();\n    } else if (this.oauthError.statusCode && this.oauthError.data) {\n      m += ' (status: ' + this.oauthError.statusCode + ' data: ' + this.oauthError.data + ')';\n    }\n  }\n\n  return m;\n};\n/**\n * Expose `InternalOAuthError`.\n */\n\n\nmodule.exports = InternalOAuthError;","map":{"version":3,"sources":["/home/astitva/Desktop/basic-react/node_modules/passport-oauth2/lib/errors/internaloautherror.js"],"names":["InternalOAuthError","message","err","Error","call","captureStackTrace","constructor","name","oauthError","prototype","__proto__","toString","m","statusCode","data","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAYA,SAASA,kBAAT,CAA4BC,OAA5B,EAAqCC,GAArC,EAA0C;AACxCC,EAAAA,KAAK,CAACC,IAAN,CAAW,IAAX;AACAD,EAAAA,KAAK,CAACE,iBAAN,CAAwB,IAAxB,EAA8B,KAAKC,WAAnC;AACA,OAAKC,IAAL,GAAY,KAAKD,WAAL,CAAiBC,IAA7B;AACA,OAAKN,OAAL,GAAeA,OAAf;AACA,OAAKO,UAAL,GAAkBN,GAAlB;AACD;AAED;;;;;AAGAF,kBAAkB,CAACS,SAAnB,CAA6BC,SAA7B,GAAyCP,KAAK,CAACM,SAA/C;AAEA;;;;;;;AAMAT,kBAAkB,CAACS,SAAnB,CAA6BE,QAA7B,GAAwC,YAAW;AACjD,MAAIC,CAAC,GAAG,KAAKL,IAAb;;AACA,MAAI,KAAKN,OAAT,EAAkB;AAAEW,IAAAA,CAAC,IAAI,OAAO,KAAKX,OAAjB;AAA2B;;AAC/C,MAAI,KAAKO,UAAT,EAAqB;AACnB,QAAI,KAAKA,UAAL,YAA2BL,KAA/B,EAAsC;AACpCS,MAAAA,CAAC,GAAG,KAAKJ,UAAL,CAAgBG,QAAhB,EAAJ;AACD,KAFD,MAEO,IAAI,KAAKH,UAAL,CAAgBK,UAAhB,IAA8B,KAAKL,UAAL,CAAgBM,IAAlD,EAAwD;AAC7DF,MAAAA,CAAC,IAAI,eAAe,KAAKJ,UAAL,CAAgBK,UAA/B,GAA4C,SAA5C,GAAwD,KAAKL,UAAL,CAAgBM,IAAxE,GAA+E,GAApF;AACD;AACF;;AACD,SAAOF,CAAP;AACD,CAXD;AAcA;;;;;AAGAG,MAAM,CAACC,OAAP,GAAiBhB,kBAAjB","sourcesContent":["/**\n * `InternalOAuthError` error.\n *\n * InternalOAuthError wraps errors generated by node-oauth.  By wrapping these\n * objects, error messages can be formatted in a manner that aids in debugging\n * OAuth issues.\n *\n * @constructor\n * @param {String} [message]\n * @param {Object|Error} [err]\n * @api public\n */\nfunction InternalOAuthError(message, err) {\n  Error.call(this);\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n  this.message = message;\n  this.oauthError = err;\n}\n\n/**\n * Inherit from `Error`.\n */\nInternalOAuthError.prototype.__proto__ = Error.prototype;\n\n/**\n * Returns a string representing the error.\n *\n * @return {String}\n * @api public\n */\nInternalOAuthError.prototype.toString = function() {\n  var m = this.name;\n  if (this.message) { m += ': ' + this.message; }\n  if (this.oauthError) {\n    if (this.oauthError instanceof Error) {\n      m = this.oauthError.toString();\n    } else if (this.oauthError.statusCode && this.oauthError.data) {\n      m += ' (status: ' + this.oauthError.statusCode + ' data: ' + this.oauthError.data + ')';\n    }\n  }\n  return m;\n};\n\n\n/**\n * Expose `InternalOAuthError`.\n */\nmodule.exports = InternalOAuthError;\n"]},"metadata":{},"sourceType":"script"}